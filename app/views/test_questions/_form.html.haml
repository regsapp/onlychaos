:javascript
  $(function() {

    var previewTimeout;

    function makePreview(inputSelector, previewSelector) {
      clearTimeout(previewTimeout);
      previewTimeout = setTimeout(function(){
        input_value = $(inputSelector).val();
        if(input_value && input_value.length >0){
          var parts = input_value.split(' ');
          $(parts).each(function(i){parts[i] = "`"+wrap_grades_if_needed(parts[i])+"`"})
          $(previewSelector).html(parts.join(' '));
          previewId =  previewSelector.replace('#', '');
          MathJax.Hub.Queue(["Typeset", MathJax.Hub, previewId]);
        }
      }, 300);
    }

    function wrap_grades_if_needed(input){
      var grade_symbol_position = input.indexOf('^');
      if(-1 != grade_symbol_position){
        grade_symbol_position = grade_symbol_position + 1;
        input = input.substr(0, grade_symbol_position) + '{' + input.substr(grade_symbol_position) + '}';
      }
      return input;
    }

    #{
      answer_count = @test_question.answers.count
      indexes = (0...answer_count).to_a
      indexes.map { |i|
        %{
          $('#test_question_answers_attributes_#{i}_content').bind('keyup', function(){makePreview('#test_question_answers_attributes_#{i}_content', '#answer_preview_#{i}');});
          $('body').bind('updated',function(){makePreview('#test_question_answers_attributes_#{i}_content', '#update_answer_preview_#{i}')});
          makePreview('#test_question_answers_attributes_#{i}_content', '#answer_preview_#{i}');
        }
      }.join('\n')
    }
  });

= form_for @test_question, :html => { :class => "form-question" } do |f|
  -if @test_question.errors.any?
    .alert.alert-danger.alert-dismissable
      %button.close{"aria-hidden" => "true", "data-dismiss" => "alert", :type => "button"} &times;
      %h4= "#{pluralize(@test_question.errors.count, "error")} prohibited this answer from being saved:"

      %ul
        - @test_question.errors.full_messages.each do |msg|
          %li= msg

  .question
    .col-sm-12.question-description
      =@test_question.question.description.html_safe

    - count = 0
    %ol.question-parts
      = f.fields_for :answers do |answer_fields|
        - question_part = answer_fields.object.question_part
        %li.question-text
          = question_part.description.html_safe
          %em="#{pluralize(question_part.marks.to_i, 'mark')}"
          - if question_part.answer_type == 'formula'
            .form-group
              .row
                %div.answer-box.col-xs-6
                  = answer_fields.text_area :content, :class => 'form-control'
                %div.preview.col-xs-6
                  %div{ id: "answer_preview_#{count}", class: "answer_preview" }
            %div.formulas
              %p.formulas Formulas
              #formulatip
                = render 'formula'

          - elsif question_part.answer_type == 'multiple choice'
            .form-group
              - ('a'..'d').each do |l|
                - content = question_part.send("choice_#{l}")
                = answer_fields.radio_button(:content, content)
                = label :"content_choice_#{l}", content
                %br

          - else
            .form-group
              .row
                %div.answer-box.col-xs-6
                  = answer_fields.text_field :content, :class => 'form-object'
                %div.units
                  - if !question_part.units.blank?
                    = question_part.units.html_safe

              -# %h5 Preview

          - count += 1
    .form-group
      .col-sm-offset-4.col-sm-8
        = f.submit @test_question.last? ? "Finish" : "Next question", :class => 'btn btn-primary'

    - if @test_question.attempts > 0
      %h5.hint Hint:
      %p.question-hint
        =@test_question.question.hint.html_safe
